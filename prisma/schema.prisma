// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                String   @id @default(cuid())
  email             String   @unique
  emailVerified     DateTime?
  name              String?
  avatar            String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  
  // Subscription info
  subscriptionId    String?
  subscriptionStatus String? // active, canceled, past_due, etc.
  subscriptionTier  String  @default("free") // free, premium
  subscriptionEndsAt DateTime?
  
  // Open Banking consent
  openBankingConsent OpenBankingConsent[]
  
  // Financial data
  accounts          Account[]
  transactions      Transaction[]
  categories        Category[]
  budgets           Budget[]
  
  // Audit trail
  auditLogs         AuditLog[]
  
  @@map("users")
}

model OpenBankingConsent {
  id                String   @id @default(cuid())
  userId            String
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  bankId            String   // ANZ, ASB, BNZ, Westpac, Kiwibank
  consentId         String   // From Open Banking API
  accessToken       String   // Encrypted
  refreshToken      String?  // Encrypted
  tokenExpiresAt    DateTime
  
  permissions       String[] // account_info, payment_initiation
  status            String   // active, expired, revoked
  
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  
  @@unique([userId, bankId])
  @@map("open_banking_consents")
}

model Account {
  id                String   @id @default(cuid())
  userId            String
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  // Open Banking data
  bankAccountId     String   // From Open Banking API
  bankId            String   // ANZ, ASB, BNZ, Westpac, Kiwibank
  accountType       String   // transactional, savings, credit_card, lending
  accountName       String
  accountNumber     String   // Encrypted
  
  // Balance info
  currentBalance    Decimal
  availableBalance  Decimal?
  currency          String   @default("NZD")
  
  // Metadata
  isActive          Boolean  @default(true)
  lastSyncAt        DateTime?
  
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  
  // Relations
  transactions      Transaction[]
  
  @@unique([userId, bankAccountId])
  @@map("accounts")
}

model Transaction {
  id                String   @id @default(cuid())
  userId            String
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  accountId         String
  account           Account  @relation(fields: [accountId], references: [id], onDelete: Cascade)
  
  // Transaction data from Open Banking
  bankTransactionId String
  amount            Decimal
  currency          String   @default("NZD")
  description       String
  reference         String?
  transactionDate   DateTime
  valueDate         DateTime?
  
  // Categorization
  categoryId        String?
  category          Category? @relation(fields: [categoryId], references: [id])
  
  // Transaction type
  type              String   // debit, credit
  status            String   // pending, completed, failed
  
  // Merchant info (if available)
  merchantName      String?
  merchantCategory  String?
  
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  
  @@unique([userId, bankTransactionId])
  @@map("transactions")
}

model Category {
  id          String   @id @default(cuid())
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  name        String
  color       String   @default("#6366f1")
  icon        String?
  parentId    String?
  parent      Category? @relation("CategoryHierarchy", fields: [parentId], references: [id])
  children    Category[] @relation("CategoryHierarchy")
  
  // System vs user-created
  isSystem    Boolean  @default(false)
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relations
  transactions Transaction[]
  budgets     Budget[]
  
  @@unique([userId, name])
  @@map("categories")
}

model Budget {
  id          String   @id @default(cuid())
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  categoryId  String
  category    Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  
  name        String
  amount      Decimal
  period      String   // monthly, weekly, yearly
  startDate   DateTime
  endDate     DateTime?
  
  isActive    Boolean  @default(true)
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  @@map("budgets")
}

model AuditLog {
  id          String   @id @default(cuid())
  userId      String?
  user        User?    @relation(fields: [userId], references: [id])
  
  action      String   // login, consent_granted, data_sync, etc.
  resource    String?  // account, transaction, etc.
  resourceId  String?
  details     Json?
  ipAddress   String?
  userAgent   String?
  
  createdAt   DateTime @default(now())
  
  @@map("audit_logs")
}
